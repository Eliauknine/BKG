 public AbstractChangePackage mergeResolvedConflicts(ChangeConflictSet conflictSe{  for (final AbstractOperation myOperation : operations.iterable()) { final Set<AbstractOperation> notInvolvedInConflict = conflictSet.getNotInvolvedInConflict();  final List<AbstractOperation> ops = new ArrayList<AbstractOperation>(notInvolvedInConflict);  // final AbstractOperation abstractOperation = ops.get(0);  // EcoreUtil.equals(abstractOperation, myOperation);  // if (abstractOperation instanceof CreateDeleteOperation) {  // final CreateDeleteOperation m = (CreateDeleteOperation) abstractOperation;  // final CreateDeleteOperation m2 = (CreateDeleteOperation) myOperation;  // final boolean equals = EcoreUtil.equals(m.getModelElement(), m2.getModelElement());  // final boolean equals2 = EcoreUtil.equals(m, m2);  //  // System.out.println(equals);  // }  if (containsOp(ops, myOperation)) {  acceptedMineList.add(myOperation); 					} else if (containsOp(accceptedMineSet, myOperation)) { } } } 
