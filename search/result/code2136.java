 		}	}  private IObservableMap getObservableMap(VDomainModelReference dmr, EStructuralFeature eStructuralFeature,  ObservableListContentProvider cp) {  if (eStructuralFeature 			.isMany()) {  return new EObjectObservableMap(cp.getKnownElements(), eStructuralFeature); 		}  return getValueProperty(dmr).observeDetail(  cp.getKnownElements()); 	}  @SuppressWarnings({ "rawtypes", "unchecked" })  private IValueProperty getValueProperty(VDomainModelReference dmr) {  ServiceReference<DatabindingProviderService> databindingProviderServiceReference = null;  try {  final Collection<ServiceReference<DatabindingProviderService>> serviceReferences = Activator.getInstance() 				.getBundle() 				.getBundleContext() 				.getServiceReferences(DatabindingProviderService.class,  String.format("(domainModelReference=%s)", dmr.getClass().getName()));   final Iterator<ServiceReference<DatabindingProviderService>> iterator = serviceReferences.iterator();  if (iterator.hasNext()) {  databindingProviderServiceReference = iterator.next(); 			}  if (databindingProviderServiceReference == null) {  throw new IllegalStateException("No DatabindingProviderService available.");  			} 		} catch (final InvalidSyntaxException e) {  throw new IllegalStateException(e); 		}  final DatabindingProviderService<VDomainModelReference> databindingProviderService = Activator.getInstance() 			.getBundle().getBundleContext().getService(databindingProviderServiceReference);  final IValueProperty result = databindingProviderService.getProperty(dmr, IValueProperty.class);  Activator.getInstance() 			.getBundle() 			.getBundleContext().ungetService(databindingProviderServiceReference);  return result; 	}
