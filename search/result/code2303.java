  renderSessionTable(p);  }  private void renderSessionTable(HtmlComponent p) {  SessionInspector[] sessionInspectors = ProcessInspector.getDefault().getSessionInspectors();  TreeMap<CompositeObject, SessionInspector> userAndTimeToSessions = new TreeMap<CompositeObject, SessionInspector>();  for (int i = 0; i < sessionInspectors.length; i++) {  String user = sessionInspectors[i].getInfo().getUserId();  long lastAccess = sessionInspectors[i].getInfo().getLastAccessedTime();  userAndTimeToSessions.put(new CompositeObject(lastAccess, user, i), sessionInspectors[i]);     }  SessionInspector[] sorted = userAndTimeToSessions.values().toArray(new SessionInspector[userAndTimeToSessions.size()]);  // render  HtmlTable table1 = new HtmlTable(p, "table1", m_table1SortInfo);  table1.startTable(1, 0, 3);  table1.startTableRow();  table1.tableHeaderCell("#");  table1.tableHeaderCell("User");  table1.tableHeaderCell("SessionID");  table1.tableHeaderCell("Details");  table1.tableHeaderCell("Created");  table1.tableHeaderCell("Last&nbsp;accessed");  table1.tableHeaderCell("JAAS");  table1.tableHeaderCell("UserAgent");  table1.endTableRow();  SessionInspector validSelection = null;  for (int i = sorted.length - 1; i >= 0; i--) {  if (sorted[i] == m_selectedSession) {  validSelection = m_selectedSession; } } }
