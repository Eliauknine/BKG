 commandStack = commandStackBuffer;	}  @Override  public void addSelectionChangedListener(ISelectionChangedListener listener) {  // TODO Auto-generated method stub 	}  @Override  public ISelection getSelection() {  return new StructuredSelection(new Object[] { this }); 	}  @Override  public void removeSelectionChangedListener(ISelectionChangedListener listener) {  // TODO Auto-generated method stub 	}  @Override  public void setSelection(ISelection selection) {  // TODO Auto-generated method stub 	}  @Override  public TableViewer getViewer() {  return algorithmViewer; 	}  @Override  public Object getEntry(int index) {  return type.getAlgorithm().get(index); 	}  @Override  public void addEntry(Object entry, int index) {  if (entry instanceof Algorithm) {  Command cmd = new CreateAlgorithmCommand(type, index, ((Algorithm) entry).getName());  executeCommand(cmd);  getViewer().refresh(); 		} 	}  @Override  public Object removeEntry(int index) {  Algorithm entry = (Algorithm) getEntry(index);  Command cmd = new DeleteAlgorithmCommand(type, entry);  executeCommand(cmd);  getViewer().refresh();  return entry; 	
