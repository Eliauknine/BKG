  return;		}  Set<Diff> allDiffs = getAllDiffs();  Set<Diff> visibleDiffs = getVisibleDiffs();  int visibleDiffCount = visibleDiffs.size();  int filteredDiffCount = Sets.difference(allDiffs, visibleDiffs).size();  int diffsToMergeCount = Iterables 				.size(Iterables.filter(visibleDiffs, hasState(DifferenceState.UNRESOLVED)));  String titleArgument = EMFCompareIDEUIMessages.getString("EMFCompareStructureMergeViewer.titleDesc",   diffsToMergeCount, visibleDiffCount, filteredDiffCount); 		((CompareViewerSwitchingPane)getControl().getParent()).setTitleArgument(titleArgument); 	}  private Set<Diff> getAllDiffs() {  Comparison comparison = getCompareConfiguration().getComparison();  return Sets.newHashSet(comparison.getDifferences()); 	}  private Set<Diff> getVisibleDiffs() {  Set<Diff> visibleDiffs = Sets.newHashSet();  EMFCompareConfiguration configuration = getCompareConfiguration();  Comparison comparison = configuration.getComparison();  IDifferenceGroupProvider groupProvider = configuration.getStructureMergeViewerGrouper().getProvider();  Predicate<? super EObject> filterPredicate = configuration.getStructureMergeViewerFilter() 				.getAggregatedPredicate();  for (IDifferenceGroup group : groupProvider.getGroups(comparison)) {  for (TreeNode node : group.getChildren()) {  if (filterPredicate.apply(node)) {  if (node.getData() instanceof Diff) {  visibleDiffs.add((Diff)node.getData()); 					}  Iterator<TreeNode> nodes = Iterators.filter(  new FilteredIterator<EObject>(node.eAllContents(), filterPredicate),  TreeNode.class);  Iterator<Diff> diffs = Iterators.filter(Iterators.transform(nodes, TREE_NODE_AS_DIFF),  Predicates.notNull());  Iterators.addAll(visibleDiffs, diffs); 				} 			} 		}  return visibleDiffs; 	}
