 resolveService = cachingService;			} 		}  SubMonitor resolveProgress = SubMonitor.convert(monitor, nodes.size() * 100);  for (ListIterator<INode> i = nodes.listIterator(); i.hasNext();) {  INode node = i.next();  INode resolved = resolveService.getNode(node, resolveProgress.newChild(100)); 			((Node) resolved).setUserFavorite(true);  if (filterIncompatible && !isInstallable(resolved)) {  i.remove(); 			} else {  i.set(resolved); 			} 		}  if (!filterIncompatible) {  //sort the node list so uninstallable nodes come last  Collections.sort(nodes, new Comparator<INode>() {  public int compare(INode n1, INode n2) {  if (n1 == n2) { } } 
