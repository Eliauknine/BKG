 ******************************************************************************/package org.eclipse.emf.emfstore.internal.server.model.versioning.impl.persistent; import java.io.ByteArrayInputStream; import java.io.ByteArrayOutputStream; import java.io.IOException; import java.util.ArrayList; import java.util.Collections; import java.util.List; import org.apache.commons.lang.StringUtils; import org.eclipse.emf.common.util.URI; import org.eclipse.emf.ecore.resource.Resource; import org.eclipse.emf.ecore.resource.ResourceSet; import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl; import org.eclipse.emf.emfstore.internal.common.model.util.ModelUtil; import org.eclipse.emf.emfstore.internal.server.model.versioning.operations.AbstractOperation; import org.eclipse.emf.emfstore.internal.server.model.versioning.operations.CreateDeleteOperation; import com.google.common.base.Optional; /**  * Type for emitting {@link AbstractOperation}s when given an {@link ReadLineCapable} type.  *  * @author emueller  *  */ public class OperationEmitter {  private static final long NEWLINE_LENGTH = System.getProperty("line.separator").getBytes().length;   private boolean withinOperationsElement;  private final Direction direction;  private long offset;  /** 	 * Constructor. 	 * 	 * @param direction 	 *            the {@link Direction} that is used for reading 	 */  public OperationEmitter(Direction direction) {  this.direction = direction;  offset = 0; 	}  /** } 
