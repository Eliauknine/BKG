 private Collection<Version> addBackwardVersions(ProjectHistory project, Version{ 	} // TODO LCP  // private void filterOperationsForSelectedElements(List<ModelElementId> ids, HistoryInfo historyInfo) {  // if (historyInfo.getChangePackage() == null) {  // return;  // }  // final Set<AbstractOperation> operationsToRemove = new LinkedHashSet<AbstractOperation>();  // final ESCloseableIterable<AbstractOperation> operations = historyInfo.getChangePackage().operations();  //  // try {  // final Iterable<AbstractOperation> iterable = operations.iterable();  //  // } finally {  //  // }  //  // for (final AbstractOperation operation : operations) {  // for (final ModelElementId id : ids) {  // if (!operation.getAllInvolvedModelElements().contains(id)) {  // operationsToRemove.add(operation);  // }  // }  // }  // operations.removeAll(operationsToRemove);  // }  private List<HistoryInfo> versionToHistoryInfo(ProjectId projectId, Collection<Version> versions, boolean includeCP)  throws ESException { } 
