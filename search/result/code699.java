 public ICompletionProposal[] computeCompletionProposals(ITextViewer viewer,{  continue;				}  if (isMatchingTemplate(template, prefix, context)) {  matches.add((TemplateProposal) createProposal(template,  context, region, getRelevance(template, prefix))); 				} 			} 		} else {  IRegion region = new Region(offset - selection.getLength(),  selection.getLength());  TemplateContext context = createContext(viewer, region);  if (context == null)  return new ICompletionProposal[0];  // name of the selection variables {line, word}_selection  context.setVariable("selection", selection.getText());   Template[] templates = getTemplates(  context.getContextType().getId());  final boolean multipleLinesSelected = areMultipleLinesSelected(  viewer);  for (int i = 0; i != templates.length; i++) {  final Template template = templates[i];  try {  context.getContextType().validate(template.getPattern()); 				} catch (TemplateException e) {  continue; 				}  if (!multipleLinesSelected 						&& template.getPattern().indexOf($_WORD_SELECTION) != -1 						|| (multipleLinesSelected && template.getPattern() 								.indexOf($_LINE_SELECTION) != -1)) {  matches.add((TemplateProposal) createProposal(template,  context, region, getRelevance(template))); 				} 
