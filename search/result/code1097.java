 public boolean isUnfoldable(final CompilationTimeStamp timestamp, final Expected{  final IReferenceChain referenceChain) {  return true; 	}  /** 	 * Checks the parameters of the expression and if they are valid in 	 * their position in the expression or not. 	 *  	 * @param timestamp 	 *                the timestamp of the actual semantic check cycle. 	 * @param referenceChain 	 *                reference chain to detect cyclic references. 	 * */  private void checkExpressionOperands(final CompilationTimeStamp timestamp, final IReferenceChain referenceChain) {  if (reference1 == null || reference2 == null) {  return; 		}  Assignment temporalAssignment = reference1.getRefdAssignment(timestamp, true);  if (temporalAssignment == null) { } } } 
