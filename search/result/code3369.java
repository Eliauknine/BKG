	 * @param trange	 */  public synchronized void dataRequest(TmfTimeRange trange) {  if (trange != null) {  // cancelPendingRequests();  StateDataRequest currentRequest = reqState.getCurrentRequest();  // If request is ongoing queue the new request  if (reqState.getState().equals(RequestState.BUSY)) {  reqState.setQueued(trange);  currentRequest = reqState.getCurrentRequest();  if (currentRequest != null) {  currentRequest.cancel(); 				} else {  TraceDebug 							.debug("Exception : State busy but current request is null"); 				} 			} else {  // Set the state to busy  reqState.setState(DataRequestState.RequestState.BUSY);  waitCursor(true);  if (TraceDebug.isDEBUG()) {  TraceDebug 							.debug("Requesting data: " + trange.getStartTime() 									+ "-" + trange.getEndTime()); 				}  // no request is ongoing, proceed with request  StateManagerFactory.getExperimentManager() 						.readExperimentTimeWindow(trange, viewID, this); 			} 		} 	}  /** 	 * Check for pending request an either send new request or change the 	 * state to idle 	 */  private synchronized void requestStateUpdate() {  // Check if new time range update is waiting to be processed  TmfTimeRange queuedRequest = reqState.popQueued();  if (queuedRequest != null) {  // Trigger the pending request  if (TraceDebug.isDEBUG()) {  TmfTimestamp start = queuedRequest.getStartTime();  TmfTimestamp end = queuedRequest.getEndTime();  TraceDebug.debug("New request about to start: " + start + "-" 						+ end); 			}  StateManagerFactory.getExperimentManager() 					.readExperimentTimeWindow(queuedRequest, viewID, this); 		} else {  // All requests cancelled and no more pending requests  TraceDebug.debug("No requests pending in the queue");  reqState.setState(RequestState.IDLE);  waitCursor(false); 		} 	} 
