 private List<Version> handlePathQuery(ProjectId projectId, PathQuery query) thro{  return result;	}  // TODO LCP  // private List<HistoryInfo> handleMEQuery(ProjectId projectId, ModelElementQuery query) throws ESException {  // final List<Version> inRange = handleRangeQuery(projectId, query);  // // SortedSet<Version> relevantVersions = new TreeSet<Version>(new VersionComparator(false));  // // for (ModelElementId id : query.getModelElements()) {  // // relevantVersions.addAll(historyCache.getChangesForModelElement(projectId, id));  // // }  // // relevantVersions.retainAll(inRange);  // final List<Version> relevantVersions = filterVersions(inRange, query.getModelElements());  // final List<HistoryInfo> result = versionToHistoryInfo(projectId, relevantVersions,  // query.isIncludeChangePackages());  // // filter ops  // for (final HistoryInfo historyInfo : result) {  // filterOperationsForSelectedElements(query.getModelElements(), historyInfo);  // }  // return result;  // }  // TODO LCP combine with op filtering  // private List<Version> filterVersions(List<Version> inRange, List<ModelElementId> modelElements) {  // final ArrayList<Version> result = new ArrayList<Version>();  // for (final Version version : inRange) {  // // special case for initial version  // if (version.getPrimarySpec() != null && version.getPrimarySpec().getIdentifier() == 0) {  // if (version.getProjectState() != null) {  // for (final ModelElementId id : modelElements) {  // if (version.getProjectState().contains(id)) {  // result.add(version);  // break;  // }  // }  // }  // }  // if (version.getChanges() == null) {  // continue;  // }  // final Set<ModelElementId> involvedModelElements = version.getChanges().getAllInvolvedModelElements();  // for (final ModelElementId id : modelElements) {  // if (involvedModelElements.contains(id)) {  // result.add(version);  // break;  // }  // }  // }  // return result;  // }  private int sourceNumber(HistoryQuery<?> query) throws ESException {  if (query.getSource() == null) { } } 
