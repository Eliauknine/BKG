 p.append(table1);  }  private void renderSessionRow(HtmlComponent p, int index, final SessionInspector session) {  boolean selected = m_selectedSession != null && (m_selectedSession == session);  SimpleDateFormat fmt = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss");  //  p.startTableRow();  p.tableCell("" + index);  p.tableCell(session.getInfo().getUserId());  p.startTableCell();  if (selected) {  p.focusAnchor();     }  p.startLinkAction(new AbstractHtmlAction("selectSession" + session.getInfo().getSessionId()) {  private static final long serialVersionUID = 898464700226491147L;  @Override  public void run() {  m_selectedSession = session;       }     });  p.print(session.getInfo().getSessionId());  p.endLinkAction();  p.endTableCell();  p.startTableCell();  p.startLinkAction(new AbstractHtmlAction("showServicesOf" + session.getInfo().getSessionId()) {  private static final long serialVersionUID = 9010809462756614037L;  @Override  public void run() {  m_selectedSession = session;  getAdminSession().getTopView().showServices();       }     });  p.print("Services");  p.endLinkAction();  p.raw("&nbsp;");  p.startLinkAction(new AbstractHtmlAction("showCallsOf" + session.getInfo().getSessionId()) {  private static final long serialVersionUID = -7595683661385397351L;  @Override  public void run() {  m_selectedSession = session;  getAdminSession().getTopView().showCalls();       }     });  p.print("Calls");  p.endLinkAction();  p.endTableCell();  p.startTableCell();  p.printNoBreak(fmt.format(new Date(session.getInfo().getCreationTime())));  p.endTableCell();  p.startTableCell();  p.printNoBreak(fmt.format(new Date(session.getInfo().getLastAccessedTime())));  p.endTableCell();  p.startTableCell();  // show jaas context  try { } 
