 return eReference;  }  public static ResourceSet newResourceSet(Resource.Factory resourceFactory)   {  ResourceSet resourceSet = new ResourceSetImpl();  resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put("*", resourceFactory);   return resourceSet;   }  public static ResourceSet newXMIResourceSet(EPackage... ePackages)   {  ResourceSet resourceSet = newResourceSet(new XMIResourceFactoryImpl());  if (ePackages != null && ePackages.length != 0)     {  Registry packageRegistry = resourceSet.getPackageRegistry();  for (EPackage ePackage : ePackages)       {  packageRegistry.put(ePackage.getNsURI(), ePackage);       }     }  return resourceSet;   }  public static ResourceSet newEcoreResourceSet(EPackage.Registry packageRegistry)   {  ResourceSet resourceSet = newResourceSet(new EcoreResourceFactoryImpl());  resourceSet.setPackageRegistry(packageRegistry);  return resourceSet;   }  public static ResourceSet newEcoreResourceSet()   {  return newEcoreResourceSet(EPackage.Registry.INSTANCE);   }  public static EObject load(String fileName, ResourceSet resourceSet)   {  Resource resource = resourceSet.getResource(URI.createFileURI(fileName), true);  return resource.getContents().get(0);   }  public static EObject loadXMI(String fileName, EPackage... ePackages)   {  ResourceSet resourceSet = newXMIResourceSet(ePackages);  return load(fileName, resourceSet);   }  public static EObject loadXMI(String fileName, EPackage.Registry packageRegistry)   {  ResourceSet resourceSet = newXMIResourceSet();  resourceSet.setPackageRegistry(packageRegistry);  return load(fileName, resourceSet);   }  public static EObject loadEcore(String fileName, EPackage.Registry packageRegistry)   {  return load(fileName, newEcoreResourceSet(packageRegistry));   }  public static EObject loadEcore(String fileName)   {  return load(fileName, newEcoreResourceSet());   }  public static void save(String fileName, EObject root, ResourceSet resourceSet)   {  save(fileName, Collections.singletonList(root), resourceSet);   }  public static void save(String fileName, List<EObject> roots, ResourceSet resourceSet)   {  URI uri = URI.createURI(fileName);  Resource resource = resourceSet.createResource(uri);  for (EObject root : roots)     {  EObject copy = EcoreUtil.copy(root);  resource.getContents().add(copy);     }  try     {  resource.save(null);     }  catch (IOException ex)     {  throw new IORuntimeException(ex);     }   }  public static void saveXMI(String fileName, EObject root)   {  save(fileName, root, newXMIResourceSet());   }  public static void saveXMI(String fileName, List<EObject> roots)   {  save(fileName, roots, newXMIResourceSet());   }  public static void saveEcore(String fileName, EObject root)   {  save(fileName, root, newEcoreResourceSet());   }  public static int countAllContents(EObject eObject)   {  int count = 0;  for (TreeIterator<EObject> it = eObject.eAllContents(); it.hasNext(); it.next())     {       ++count;     }  return count;   }  public static EClass[] getConcreteClasses(EPackage ePackage)   {  List<EClass> result = new ArrayList<EClass>(0);  for (EClassifier classifier : ePackage.getEClassifiers())     {  if (classifier instanceof EClass)       {  EClass eClass = (EClass)classifier;  if (!eClass.isAbstract() && !eClass.isInterface())         {  result.add(eClass);         }       }     }  return result.toArray(new EClass[result.size()]);   }  public static EClass[] getPersistentClasses(EPackage ePackage)   {  List<EClass> result = new ArrayList<EClass>(); 
