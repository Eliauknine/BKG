import org.eclipse.scout.commons.exception.ProcessingException;import org.eclipse.scout.rt.client.ui.action.ActionUtility; import org.eclipse.scout.rt.client.ui.action.IActionFilter; import org.eclipse.scout.rt.client.ui.action.menu.root.ITableContextMenu; import org.eclipse.scout.rt.client.ui.basic.table.AbstractTable; import org.eclipse.scout.rt.client.ui.basic.table.ITableRow; import org.eclipse.scout.rt.client.ui.basic.table.columns.AbstractStringColumn; import org.eclipse.scout.rt.testing.client.runner.ClientTestRunner; import org.junit.Assert; import org.junit.Test; import org.junit.runner.RunWith; /**  *  */ @RunWith(ClientTestRunner.class) public class TableMenuTest {  @Test  public void testSingleSelection() throws Exception {  Table t = new Table();  t.addRowsByMatrix(new Object[][]{         {"Boss", "Hugo"},         {"Meier", "Hans"}     });  ITableContextMenu contextMenu = t.getContextMenu();  // single hugo boss  t.selectRows(CollectionUtility.arrayList(t.getRow(0)), false);  IActionFilter filter = ActionUtility.createMenuFilterMenuTypes(contextMenu.getCurrentMenuTypes(), true);  List<IMenu> visibleMenus = ActionUtility.normalizedActions(contextMenu.getChildActions(), filter);  Assert.assertEquals(2, visibleMenus.size());  Assert.assertEquals("SingleSelectionMenu", visibleMenus.get(0).getClass().getSimpleName());  Assert.assertEquals("HugoBossMenu", visibleMenus.get(1).getClass().getSimpleName());  // single only meier  t.selectRows(CollectionUtility.arrayList(t.getRow(1)), false);  filter = ActionUtility.createMenuFilterMenuTypes(contextMenu.getCurrentMenuTypes(), true);  visibleMenus = ActionUtility.normalizedActions(contextMenu.getChildActions(), filter);  Assert.assertEquals(1, visibleMenus.size());  Assert.assertEquals("SingleSelectionMenu", visibleMenus.get(0).getClass().getSimpleName());   }  @Test  public void setMultiSeleciton() throws ProcessingException {  Table t = new Table();  t.addRowsByMatrix(new Object[][]{         {"Boss", "Hugo"},         {"Meier", "Hans"}     });  ITableContextMenu contextMenu = t.getContextMenu();  // multi selection  t.selectRows(CollectionUtility.arrayList(t.getRow(0), t.getRow(1)), false);  IActionFilter filter = ActionUtility.createMenuFilterMenuTypes(contextMenu.getCurrentMenuTypes(), true);  List<IMenu> visibleMenus = ActionUtility.normalizedActions(contextMenu.getChildActions(), filter);  Assert.assertEquals(1, visibleMenus.size());  Assert.assertEquals("MultiSelectionMenu", visibleMenus.get(0).getClass().getSimpleName());   }  @Test  public void testEmptySeleciton() throws ProcessingException {  Table t = new Table();  t.addRowsByMatrix(new Object[][]{         {"Boss", "Hugo"},         {"Meier", "Hans"}     });  ITableContextMenu contextMenu = t.getContextMenu();  // empty selection  t.selectRows(CollectionUtility.<ITableRow> emptyArrayList(), false);  IActionFilter filter = ActionUtility.createMenuFilterMenuTypes(contextMenu.getCurrentMenuTypes(), true);  List<IMenu> visibleMenus = ActionUtility.normalizedActions(contextMenu.getChildActions(), filter);  Assert.assertEquals(1, visibleMenus.size());  Assert.assertEquals("EmptySpaceMenu", visibleMenus.get(0).getClass().getSimpleName());   }  public class Table extends AbstractTable {  public NameColumn getNameColumn() {  return getColumnSet().getColumnByClass(NameColumn.class); } } } 
