   } private List<Path> resolvePlatformLibrariesLegacy() {  final Path jreHome = jreHome();  final Stream<Path> libDirs;  final String osName = System.getProperty("os.name");  if (StringUtils.isNotEmpty(osName) && osName.toLowerCase().startsWith("mac")) {  libDirs = Stream.of(jreHome.resolve("../Classes").normalize());     }  else {  // fall back to try to retrieve them out of the lib directory  libDirs = Stream.of(jreHome.resolve("lib"), jreHome.resolve("lib/ext"));     }  final List<Path> result = libDirs         .flatMap(JreInfo::listFiles)         .filter(JreInfo::isArchive)         .collect(toList());  final Path classesDir = jreHome.resolve("classes");  if (Files.isReadable(classesDir) && Files.isDirectory(classesDir)) {  result.add(classesDir);  }  return result;   }  private static Stream<Path> listFiles(final Path directory) {  try {  return Files.list(directory);     } }
