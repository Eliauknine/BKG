  SubMonitor progress = SubMonitor.convert(monitor, 3); progress.beginTask("Checking...", 3);  try {  String etag = getEtag().orNull();  progress.worked(1);  if (etag == null) {  return Logs.toStatus(WARN_FAILED_TO_FETCH_PROBLEM_DB_ETAG);             }  try {  if (isLocalIndexOutdated(etag)) {  progress.subTask("Downloading new problem database");  File remoteIndexZip = downloadRemoteIndex();  progress.worked(1);  File tempDir = Files.createTempDir();  progress.subTask("Merging problem database");  Zips.unzip(remoteIndexZip, tempDir);  service.replaceContent(tempDir);  progress.worked(1);  settings.setProblemsZipEtag(etag);  FileUtils.deleteQuietly(tempDir);                 }             } catch (Exception e) {  log(WARN_INDEX_UPDATE_FAILED, e);             }  return Status.OK_STATUS;         } finally {  monitor.done();         }     }  private boolean isLocalIndexOutdated(String etag) {  return !StringUtils.equals(settings.getProblemsZipEtag(), etag);     }  private Optional<String> getEtag() {  try {  Executor executor = Executor.newInstance();  URI target = indexUrl.toURI();  Request request = Request.Head(target).viaProxy(getProxyHost(target).orNull());  Response response = proxyAuthentication(executor, target).execute(request);  // assuming that this cannot be null:  HttpResponse httpResponse = response.returnResponse();  // headers, however, may be null:  Header etagHeader = httpResponse.getFirstHeader("ETAG");  if (etagHeader == null) {  return absent();             }  return fromNullable(etagHeader.getValue());         } catch (Exception e) {  log(WARN_INDEX_UPDATE_FAILED, e);  return Optional.absent();         }     }  private File downloadRemoteIndex() throws Exception {  Executor executor = Executor.newInstance();  URI target = indexUrl.toURI();  Request request = Request.Get(target).viaProxy(getProxyHost(target).orNull());  Response response = Proxies.proxyAuthentication(executor, target).execute(request);  Content content = response.returnContent();  File temp = File.createTempFile("problems-index", ".zip");  Files.write(content.asBytes(), temp);  return temp;     }
