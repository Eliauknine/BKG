 return (Comparison)getCompareConfiguration().getProperty(EMFCompareConstants.COMPARE_RESULT);	}  /** 	 * {@inheritDoc} 	 *  	 * @see org.eclipse.compare.contentmergeviewer.TextMergeViewer#copy(boolean) 	 */  @Override  protected void copy(final boolean leftToRight) {  final List<Diff> differences;  if (getComparison().isThreeWay()) {  differences = ImmutableList.copyOf(filter(getComparison().getDifferences(),  new Predicate<Diff>() {  public boolean apply(Diff diff) {  final boolean unresolved = diff.getState() == DifferenceState.UNRESOLVED;  final boolean nonConflictual = diff.getConflict() == null;  final boolean fromLeftToRight = leftToRight 									&& diff.getSource() == DifferenceSource.LEFT;  final boolean fromRightToLeft = !leftToRight 									&& diff.getSource() == DifferenceSource.RIGHT;  return unresolved && nonConflictual && (fromLeftToRight || fromRightToLeft); 						} 					})); 		} else {  differences = ImmutableList.copyOf(filter(getComparison().getDifferences(), EMFComparePredicates 					.hasState(DifferenceState.UNRESOLVED))); 		}  if (differences.size() > 0) {  final Command copyCommand = getEditingDomain().createCopyCommand(differences, leftToRight,  EMFCompareRCPPlugin.getDefault().getMergerRegistry());  getEditingDomain().getCommandStack().execute(copyCommand);  refresh(); 		} 	}  protected void copyDiff(boolean leftToRight) {  Object input = getInput();  if (input instanceof CompareInputAdapter 				&& ((CompareInputAdapter)input).getComparisonObject() instanceof AttributeChange) {  final AttributeChange attributeChange = (AttributeChange)((CompareInputAdapter)input) 					.getComparisonObject();  final Command copyCommand = getEditingDomain().createCopyCommand(  Collections.singletonList(attributeChange), leftToRight,  EMFCompareRCPPlugin.getDefault().getMergerRegistry());  getEditingDomain().getCommandStack().execute(copyCommand);  refresh(); 		} 	
