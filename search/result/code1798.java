 javaDelegate.run(structuredSelection);				} 			}  Multimap<IProject, IFile> files = collectFiles(structuredSelection);  final List<Change> organizeImports = importOrganizerProvider.get().organizeImports(files);  Shell shell = activeSite.getShell();  IRunnableWithProgress op = new IRunnableWithProgress() {  @Override  public void run(IProgressMonitor mon) throws InvocationTargetException, InterruptedException {  int totalWork = organizeImports.size();  mon.beginTask(Messages.OrganizeImports, totalWork);  for (int i = 0; !mon.isCanceled() && i < organizeImports.size(); i++) {  Change change = organizeImports.get(i);  mon.setTaskName(Messages.OrganizeImports + " - Xtend (" + (i + 1) + " of " + totalWork + ")");  try {  mon.subTask(change.getName());  change.perform(new SubProgressMonitor(mon, 1)); 						} catch (CoreException e) {  throw new InvocationTargetException(e); 						}  }  if (mon.isCanceled()) {  throw new InterruptedException(); 					} 				
