 		}	}  private void setModelElementIdOnResource(XMIResource resource, EObject modelElement) {  if (modelElement instanceof IdEObjectCollection) {  return; 		}  final String modelElementId = getIDForEObject(modelElement);  resource.setID(modelElement, modelElementId); 	}  private String getIDForEObject(EObject modelElement) {  final Project project = ESLocalProjectImpl.class.cast(localProject).toInternalAPI().getProject();  final String modelElementId = project.getModelElementId(modelElement).toString();  if (modelElementId == null) {  WorkspaceUtil 				.handleException(new IllegalStateException(Messages.ResourcePersister_MissingID + modelElement)); 		}  return modelElementId; 	}  private void fireDirtyStateChangedNotification() {  for (final IDEObjectCollectionDirtyStateListener listener : listeners) {  listener.notifyAboutDirtyStateChange(); }
